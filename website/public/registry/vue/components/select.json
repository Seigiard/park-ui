{
  "files": [
    {
      "filename": "select.tsx",
      "hasMultipleParts": true,
      "content": "import type { Assign } from '@ark-ui/vue'\nimport { Select } from '@ark-ui/vue/select'\nimport { select } from 'styled-system/recipes'\nimport type { HTMLStyledProps } from 'styled-system/types'\nimport type { Component } from 'vue'\nimport { createStyleContext } from '~/lib/create-style-context'\n\nconst { withRootProvider, withContext } = createStyleContext(select)\n\nexport type RootProviderProps = Component<typeof RootProvider>\nexport const RootProvider = withRootProvider<Select.RootProviderBaseProps>(Select.RootProvider)\n\nexport type RootProps = Component<typeof Root>\nexport const Root = withRootProvider<Select.RootBaseProps>(Select.Root)\n\nexport type ClearTriggerProps = Component<typeof ClearTrigger>\nexport const ClearTrigger = withContext<\n  Assign<HTMLStyledProps<'button'>, Select.ClearTriggerBaseProps>\n>(Select.ClearTrigger, 'clearTrigger')\n\nexport type ContentProps = Component<typeof Content>\nexport const Content = withContext<Assign<HTMLStyledProps<'div'>, Select.ContentBaseProps>>(\n  Select.Content,\n  'content',\n)\n\nexport type ControlProps = Component<typeof Control>\nexport const Control = withContext<Assign<HTMLStyledProps<'div'>, Select.ControlBaseProps>>(\n  Select.Control,\n  'control',\n)\n\nexport type IndicatorProps = Component<typeof Indicator>\nexport const Indicator = withContext<Assign<HTMLStyledProps<'div'>, Select.IndicatorBaseProps>>(\n  Select.Indicator,\n  'indicator',\n)\n\nexport type ItemGroupLabelProps = Component<typeof ItemGroupLabel>\nexport const ItemGroupLabel = withContext<\n  Assign<HTMLStyledProps<'div'>, Select.ItemGroupLabelBaseProps>\n>(Select.ItemGroupLabel, 'itemGroupLabel')\n\nexport type ItemGroupProps = Component<typeof ItemGroup>\nexport const ItemGroup = withContext<Assign<HTMLStyledProps<'div'>, Select.ItemGroupBaseProps>>(\n  Select.ItemGroup,\n  'itemGroup',\n)\n\nexport type ItemIndicatorProps = Component<typeof ItemIndicator>\nexport const ItemIndicator = withContext<\n  Assign<HTMLStyledProps<'div'>, Select.ItemIndicatorBaseProps>\n>(Select.ItemIndicator, 'itemIndicator')\n\nexport type ItemProps = Component<typeof Item>\nexport const Item = withContext<Assign<HTMLStyledProps<'div'>, Select.ItemBaseProps>>(\n  Select.Item,\n  'item',\n)\n\nexport type ItemTextProps = Component<typeof ItemText>\nexport const ItemText = withContext<Assign<HTMLStyledProps<'span'>, Select.ItemTextBaseProps>>(\n  Select.ItemText,\n  'itemText',\n)\n\nexport type LabelProps = Component<typeof Label>\nexport const Label = withContext<Assign<HTMLStyledProps<'label'>, Select.LabelBaseProps>>(\n  Select.Label,\n  'label',\n)\n\nexport type ListProps = Component<typeof List>\nexport const List = withContext<Assign<HTMLStyledProps<'div'>, Select.ListBaseProps>>(\n  Select.List,\n  'list',\n)\n\nexport type PositionerProps = Component<typeof Positioner>\nexport const Positioner = withContext<Assign<HTMLStyledProps<'div'>, Select.PositionerBaseProps>>(\n  Select.Positioner,\n  'positioner',\n)\n\nexport type TriggerProps = Component<typeof Trigger>\nexport const Trigger = withContext<Assign<HTMLStyledProps<'button'>, Select.TriggerBaseProps>>(\n  Select.Trigger,\n  'trigger',\n)\n\nexport type ValueTextProps = Component<typeof ValueText>\nexport const ValueText = withContext<Assign<HTMLStyledProps<'span'>, Select.ValueTextBaseProps>>(\n  Select.ValueText,\n  'valueText',\n)\n\nexport {\n  SelectContext as Context,\n  type SelectContextProps as ContextProps,\n  SelectHiddenSelect as HiddenSelect,\n  type SelectHiddenSelectProps as HiddenSelectProps,\n} from '@ark-ui/vue/select'\n"
    }
  ]
}
